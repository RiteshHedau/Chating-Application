{"ast":null,"code":"var _jsxFileName = \"D:\\\\Java material\\\\Projects\\\\Chating Application\\\\quick-chat-app-\\\\client\\\\src\\\\pages\\\\home\\\\components\\\\userList.js\",\n  _s = $RefreshSig$();\nimport toast from \"react-hot-toast\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createNewChat } from './../../../apiCalls/chat';\nimport { hideLoader, showLoader } from \"../../../redux/loaderSlice\";\nimport { setAllChats, setSelectedChat } from './../../../redux/usersSlice';\nimport moment from \"moment\";\nimport { useEffect } from \"react\";\nimport store from \"../../../redux/store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UsersList({\n  searchKey,\n  socket,\n  onlineUser\n}) {\n  _s();\n  const {\n    allUsers,\n    allChats,\n    user: currentUser,\n    selectedChat\n  } = useSelector(state => state.userReducer);\n  const dispatch = useDispatch();\n  const startNewChat = async searchedUserId => {\n    let response = null;\n    try {\n      dispatch(showLoader());\n      response = await createNewChat([currentUser._id, searchedUserId]);\n      dispatch(hideLoader());\n      if (response.success) {\n        toast.success(response.message);\n        const newChat = response.data;\n        const updatedChat = [...allChats, newChat];\n        dispatch(setAllChats(updatedChat));\n        dispatch(setSelectedChat(newChat));\n      }\n    } catch (error) {\n      toast.error(response.message);\n      dispatch(hideLoader());\n    }\n  };\n  const openChat = selectedUserId => {\n    const chat = allChats.find(chat => chat.members.map(m => m._id).includes(currentUser._id) && chat.members.map(m => m._id).includes(selectedUserId));\n    if (chat) {\n      dispatch(setSelectedChat(chat));\n    }\n  };\n  const IsSelectedChat = user => {\n    if (selectedChat) {\n      return selectedChat.members.map(m => m._id).includes(user._id);\n    }\n    return false;\n  };\n  const getLastMessageTimeStamp = userId => {\n    const chat = allChats.find(chat => chat.members.map(m => m._id).includes(userId));\n    if (!chat || !(chat !== null && chat !== void 0 && chat.lastMessage)) {\n      return \"\";\n    } else {\n      var _chat$lastMessage;\n      return moment(chat === null || chat === void 0 ? void 0 : (_chat$lastMessage = chat.lastMessage) === null || _chat$lastMessage === void 0 ? void 0 : _chat$lastMessage.createdAt).format('hh:mm A');\n    }\n  };\n  const getlastMessage = userId => {\n    const chat = allChats.find(chat => chat.members.map(m => m._id).includes(userId));\n    if (!chat || !chat.lastMessage) {\n      return \"\";\n    } else {\n      var _chat$lastMessage2, _chat$lastMessage3, _chat$lastMessage3$te;\n      const msgPrefix = (chat === null || chat === void 0 ? void 0 : (_chat$lastMessage2 = chat.lastMessage) === null || _chat$lastMessage2 === void 0 ? void 0 : _chat$lastMessage2.sender) === currentUser._id ? \"You: \" : \"\";\n      return msgPrefix + (chat === null || chat === void 0 ? void 0 : (_chat$lastMessage3 = chat.lastMessage) === null || _chat$lastMessage3 === void 0 ? void 0 : (_chat$lastMessage3$te = _chat$lastMessage3.text) === null || _chat$lastMessage3$te === void 0 ? void 0 : _chat$lastMessage3$te.substring(0, 25));\n    }\n  };\n  function formatName(user) {\n    var _user$lastname;\n    let fname = user.firstname.at(0).toUpperCase() + user.firstname.slice(1).toLowerCase();\n    let lname = ((_user$lastname = user.lastname) === null || _user$lastname === void 0 ? void 0 : _user$lastname.at(0).toUpperCase()) + user.lastname.slice(1).toLowerCase();\n    return fname + ' ' + lname;\n  }\n  useEffect(() => {\n    socket.off('set-message-count').on('set-message-count', message => {\n      const selectedChat = store.getState().userReducer.selectedChat;\n      let allChats = store.getState().userReducer.allChats;\n      if ((selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat._id) !== message.chatId) {\n        const updatedchats = allChats.map(chat => {\n          if (chat._id === message.chatId) {\n            return {\n              ...chat,\n              unreadMessageCount: ((chat === null || chat === void 0 ? void 0 : chat.unreadMessageCount) || 0) + 1,\n              lastMessage: message\n            };\n          }\n          return chat;\n        });\n        allChats = updatedchats;\n      }\n      //1. FIND THE LATEST CHAT\n      const latestChat = allChats.find(chat => chat._id === message.chatId);\n\n      //2. GET ALL OTHER CHATS\n      const otherChats = allChats.filter(chat => chat._id !== message.chatId);\n\n      //3. CREATE A NEW ARRAY LATEST CHA ON TOP & THN OTHER CHATS\n      allChats = [latestChat, ...otherChats];\n      dispatch(setAllChats(allChats));\n    });\n  }, []);\n  const getUnreadMessageCount = userId => {\n    var _chat$lastMessage4;\n    const chat = allChats.find(chat => chat.members.map(m => m._id).includes(userId));\n    if (chat && chat.unreadMessageCount && ((_chat$lastMessage4 = chat.lastMessage) === null || _chat$lastMessage4 === void 0 ? void 0 : _chat$lastMessage4.sender) !== currentUser._id) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unread-message-counter\",\n        children: [\" \", chat.unreadMessageCount, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 20\n      }, this);\n    } else {\n      return \"\";\n    }\n  };\n  function getData() {\n    if (searchKey === \"\") {\n      return allChats;\n    } else {\n      return allUsers.filter(user => {\n        var _user$firstname, _user$lastname2;\n        return ((_user$firstname = user.firstname) === null || _user$firstname === void 0 ? void 0 : _user$firstname.toLowerCase().includes(searchKey === null || searchKey === void 0 ? void 0 : searchKey.toLowerCase())) || ((_user$lastname2 = user.lastname) === null || _user$lastname2 === void 0 ? void 0 : _user$lastname2.toLowerCase().includes(searchKey === null || searchKey === void 0 ? void 0 : searchKey.toLowerCase()));\n      });\n    }\n  }\n  return getData().map(obj => {\n    let user = obj;\n    if (obj.members) {\n      user = obj.members.find(mem => mem._id !== currentUser._id);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-search-filter\",\n      onClick: () => openChat(user._id),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: IsSelectedChat(user) ? \"selected-user\" : \"filtered-user\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-user-display\",\n          children: [user.profilePic && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: user.profilePic,\n            alt: \"Profile Pic\",\n            className: \"user-profile-image\",\n            style: onlineUser.includes(user._id) ? {\n              border: '#82e0aa 3px solid'\n            } : {}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 45\n          }, this), !user.profilePic && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: IsSelectedChat(user) ? \"user-selected-avatar\" : \"user-default-avatar\",\n            style: onlineUser.includes(user._id) ? {\n              border: '#82e0aa 3px solid'\n            } : {},\n            children: user.firstname.charAt(0).toUpperCase() + user.lastname.charAt(0).toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-user-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-display-name\",\n              children: formatName(user)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-display-email\",\n              children: getlastMessage(user._id) || user.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [getUnreadMessageCount(user._id), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"last-message-timestamp\",\n              children: getLastMessageTimeStamp(user._id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this), !allChats.find(chat => chat.members.map(m => m._id).includes(user._id)) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-start-chat\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"user-start-chat-btn\",\n              onClick: () => startNewChat(user._id),\n              children: \"Start Chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)\n    }, user._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 20\n    }, this);\n  });\n}\n_s(UsersList, \"R5LkaO0KwFeO7HGWaqxGXiBf5xo=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = UsersList;\nexport default UsersList;\nvar _c;\n$RefreshReg$(_c, \"UsersList\");","map":{"version":3,"names":["toast","useDispatch","useSelector","createNewChat","hideLoader","showLoader","setAllChats","setSelectedChat","moment","useEffect","store","jsxDEV","_jsxDEV","UsersList","searchKey","socket","onlineUser","_s","allUsers","allChats","user","currentUser","selectedChat","state","userReducer","dispatch","startNewChat","searchedUserId","response","_id","success","message","newChat","data","updatedChat","error","openChat","selectedUserId","chat","find","members","map","m","includes","IsSelectedChat","getLastMessageTimeStamp","userId","lastMessage","_chat$lastMessage","createdAt","format","getlastMessage","_chat$lastMessage2","_chat$lastMessage3","_chat$lastMessage3$te","msgPrefix","sender","text","substring","formatName","_user$lastname","fname","firstname","at","toUpperCase","slice","toLowerCase","lname","lastname","off","on","getState","chatId","updatedchats","unreadMessageCount","latestChat","otherChats","filter","getUnreadMessageCount","_chat$lastMessage4","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getData","_user$firstname","_user$lastname2","obj","mem","onClick","profilePic","src","alt","style","border","charAt","email","_c","$RefreshReg$"],"sources":["D:/Java material/Projects/Chating Application/quick-chat-app-/client/src/pages/home/components/userList.js"],"sourcesContent":["import toast from \"react-hot-toast\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createNewChat } from './../../../apiCalls/chat';\r\nimport { hideLoader, showLoader } from \"../../../redux/loaderSlice\";\r\nimport { setAllChats, setSelectedChat } from './../../../redux/usersSlice';\r\nimport moment from \"moment\";\r\nimport { useEffect } from \"react\";\r\nimport store from \"../../../redux/store\";\r\n\r\nfunction UsersList({searchKey, socket, onlineUser}){\r\n    const { allUsers, allChats, user: currentUser, selectedChat } = useSelector(state => state.userReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const startNewChat = async (searchedUserId) => {\r\n        let response = null;\r\n        try{\r\n            dispatch(showLoader());\r\n            response =await createNewChat([currentUser._id, searchedUserId]);\r\n            dispatch(hideLoader());\r\n\r\n            if(response.success){\r\n                toast.success(response.message);\r\n                const newChat = response.data;\r\n                const updatedChat = [...allChats, newChat]\r\n                dispatch(setAllChats(updatedChat));\r\n                dispatch(setSelectedChat(newChat));\r\n            }\r\n        }catch(error){\r\n            toast.error(response.message);\r\n            dispatch(hideLoader());\r\n        }\r\n    }\r\n\r\n    const openChat = (selectedUserId) => {\r\n        const chat = allChats.find(chat => \r\n            chat.members.map(m => m._id).includes(currentUser._id) && \r\n            chat.members.map(m => m._id).includes(selectedUserId)\r\n        )\r\n\r\n        if(chat){\r\n            dispatch(setSelectedChat(chat));\r\n        }\r\n    }\r\n\r\n    const IsSelectedChat = (user) => {\r\n        if(selectedChat){\r\n            return selectedChat.members.map(m => m._id).includes(user._id);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const getLastMessageTimeStamp = (userId) => {\r\n        const chat = allChats.find(chat => chat.members.map(m => m._id).includes(userId));\r\n\r\n        if(!chat || !chat?.lastMessage){\r\n            return \"\";\r\n        }else{\r\n            return moment(chat?.lastMessage?.createdAt).format('hh:mm A');\r\n        }\r\n    }\r\n\r\n    const getlastMessage = (userId) => {\r\n        const chat = allChats.find(chat => chat.members.map(m => m._id).includes(userId));\r\n\r\n        if(!chat || !chat.lastMessage){\r\n            return \"\";\r\n        }else{\r\n            const msgPrefix = chat?.lastMessage?.sender === currentUser._id ? \"You: \" : \"\";\r\n            return msgPrefix + chat?.lastMessage?.text?.substring(0, 25);\r\n        }\r\n    }\r\n\r\n    function formatName(user){\r\n        let fname = user.firstname.at(0).toUpperCase() + user.firstname.slice(1).toLowerCase();\r\n        let lname = user.lastname?.at(0).toUpperCase() + user.lastname.slice(1).toLowerCase();\r\n        return fname + ' ' + lname;\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.off('set-message-count').on('set-message-count', (message) => {\r\n            const selectedChat = store.getState().userReducer.selectedChat;\r\n            let allChats = store.getState().userReducer.allChats;\r\n\r\n            if(selectedChat?._id !== message.chatId){\r\n                const updatedchats = allChats.map(chat => {\r\n                    if(chat._id === message.chatId){\r\n                        return {\r\n                            ...chat,\r\n                            unreadMessageCount: (chat?.unreadMessageCount || 0) + 1,\r\n                            lastMessage: message\r\n                        };\r\n                    }\r\n                    return chat;\r\n                });\r\n                allChats = updatedchats;\r\n            }\r\n            //1. FIND THE LATEST CHAT\r\n            const latestChat = allChats.find(chat => chat._id === message.chatId);\r\n\r\n\r\n            //2. GET ALL OTHER CHATS\r\n            const otherChats = allChats.filter(chat => chat._id !== message.chatId);\r\n\r\n            //3. CREATE A NEW ARRAY LATEST CHA ON TOP & THN OTHER CHATS\r\n            allChats = [latestChat, ...otherChats];\r\n\r\n            dispatch(setAllChats(allChats));\r\n        })\r\n    }, [])\r\n\r\n    const getUnreadMessageCount = (userId) => {\r\n        const chat = allChats.find(chat => \r\n            chat.members.map(m => m._id).includes(userId)\r\n        );\r\n\r\n        if(chat && chat.unreadMessageCount && chat.lastMessage?.sender !== currentUser._id){\r\n            return <div className=\"unread-message-counter\"> {chat.unreadMessageCount} </div>;\r\n        }else{\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    function getData(){\r\n        if(searchKey === \"\"){\r\n            return allChats;\r\n        }else{\r\n            return allUsers.filter(user => {\r\n                return user.firstname?.toLowerCase().includes(searchKey?.toLowerCase()) ||\r\n                    user.lastname?.toLowerCase().includes(searchKey?.toLowerCase());\r\n            });\r\n        }\r\n    }\r\n    \r\n    return (\r\n        getData()\r\n        .map(obj => {\r\n            let user = obj;\r\n            if(obj.members){\r\n                user = obj.members.find(mem => mem._id !== currentUser._id);\r\n            }\r\n            \r\n            return <div className=\"user-search-filter\" onClick={() => openChat(user._id)} key={user._id}>\r\n                <div className={IsSelectedChat(user) ? \"selected-user\": \"filtered-user\"}>\r\n                    <div className=\"filter-user-display\">\r\n                        {user.profilePic && <img src={user.profilePic} \r\n                                                alt=\"Profile Pic\" \r\n                                                className=\"user-profile-image\" \r\n                                                style={onlineUser.includes(user._id) ? {border: '#82e0aa 3px solid'} : {}} \r\n                                            />}\r\n\r\n                        {!user.profilePic &&<div \r\n                                                className={IsSelectedChat(user)? \"user-selected-avatar\" : \"user-default-avatar\"}\r\n                                                style={onlineUser.includes(user._id) ? {border: '#82e0aa 3px solid'} : {}}\r\n                                            >\r\n                            {\r\n                                user.firstname.charAt(0).toUpperCase() + \r\n                                user.lastname.charAt(0).toUpperCase()\r\n                            }\r\n                        </div>}\r\n                        <div className=\"filter-user-details\">\r\n                            <div className=\"user-display-name\">{ formatName(user)}</div>\r\n                            <div className=\"user-display-email\">{ getlastMessage(user._id) || user.email }</div>\r\n                        </div>\r\n                        <div>\r\n                            { getUnreadMessageCount(user._id) }\r\n                            <div className=\"last-message-timestamp\">{ getLastMessageTimeStamp(user._id)}</div>\r\n                        </div>\r\n                        { !allChats.find(chat => chat.members.map(m => m._id).includes(user._id)) &&\r\n                            <div className=\"user-start-chat\">\r\n                                <button className=\"user-start-chat-btn\" onClick={() => startNewChat(user._id)}>\r\n                                    Start Chat\r\n                                </button>\r\n                            </div>\r\n                        }\r\n                        </div>\r\n                    </div>                        \r\n            </div>\r\n        })\r\n    )\r\n}\r\n\r\nexport default UsersList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}